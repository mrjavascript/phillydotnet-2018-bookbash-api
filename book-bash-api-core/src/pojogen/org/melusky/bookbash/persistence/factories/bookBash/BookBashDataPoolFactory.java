package org.melusky.bookbash.persistence.factories.bookBash;

import org.melusky.bookbash.persistence.model.obj.bookBash.*;
import org.melusky.bookbash.persistence.model.obj.bookBash.repository.*;
import org.melusky.bookbash.persistence.util.BasicDataGenerator;
import org.springframework.stereotype.Component;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.Collection;
import java.util.Arrays;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;


/** 
 * DAO factory implementation.
 * @author autogenerated
 */
@Component
public class BookBashDataPoolFactory implements ApplicationContextAware, DataPoolFactory {
	/** Table commit order. */
    private static final Multimap<String, String> tableDeps = ArrayListMultimap.create();
	/** DB commit order. */
	private static final String[] commitOrder = {"SecurityRole", "BookBacklog", "Book", "BacklogStatus", "ApplicationUserSecurity", "ApplicationUser"};
	/** DB commit order. */
	private static final Class<?>[] classCommitOrder = {SecurityRole.class, BookBacklog.class, Book.class, BacklogStatus.class, ApplicationUserSecurity.class, ApplicationUser.class};

	static{
		// Store table deps for possible use. 
	}
	
	/** For cyclic classes. */
	static ApplicationContext context;
	 
	public void setApplicationContext(ApplicationContext ctx){
	    context = ctx;
	}




    /**
     * Data pool factory for ApplicationUser.
     * @return ApplicationUserA ApplicationUser object
     */
    public static ApplicationUser getApplicationUser() {

        ApplicationUser applicationUser = new ApplicationUser();    
        
        applicationUser.setDateCreated(BasicDataGenerator.generateDate());
        applicationUser.setDateDisabled(BasicDataGenerator.generateDate());
        applicationUser.setDateEmailConfirmed(BasicDataGenerator.generateDate());
        applicationUser.setDateUpdated(BasicDataGenerator.generateDate());
        applicationUser.setEmailAddress(BasicDataGenerator.generateRandomString(2147483647));
        applicationUser.setPasswordHash(BasicDataGenerator.generateRandomString(2147483647));
        applicationUser.setUsername(BasicDataGenerator.generateRandomString(2147483647));
        applicationUser.setUserCreated(BasicDataGenerator.generateRandomLong());
        applicationUser.setUserUpdated(BasicDataGenerator.generateRandomLong());

        return applicationUser;
    }

    /**
     * Data pool factory for ApplicationUserSecurity.
     * @return ApplicationUserSecurity A ApplicationUserSecurity object
     */
    public static ApplicationUserSecurity getApplicationUserSecurity() {

        ApplicationUserSecurity applicationUserSecurity =  getApplicationUserSecurity(
	        null, null);

		return applicationUserSecurity;
       
    }

     /**
     * Data pool factory for ApplicationUserSecurity.
     * @param role A valid SecurityRole object
     * @param user A valid ApplicationUser object
     * @return ApplicationUserSecurity A ApplicationUserSecurity object
     */
    public static ApplicationUserSecurity getApplicationUserSecurity(SecurityRole role, ApplicationUser user) {
        ApplicationUserSecurity applicationUserSecurity = new ApplicationUserSecurity();     
        applicationUserSecurity.setDateCreated(BasicDataGenerator.generateDate());
        applicationUserSecurity.setDateDisabled(BasicDataGenerator.generateDate());
        applicationUserSecurity.setDateUpdated(BasicDataGenerator.generateDate());
		if (role != null) {
			role.addApplicationUserSecurity (applicationUserSecurity);
		}
		if (user != null) {
			user.addApplicationUserSecurity (applicationUserSecurity);
		}
        applicationUserSecurity.setUserCreated(BasicDataGenerator.generateRandomLong());
        applicationUserSecurity.setUserUpdated(BasicDataGenerator.generateRandomLong());

        return applicationUserSecurity;
    }

    /**
     * Data pool factory for BacklogStatus.
     * @return BacklogStatusA BacklogStatus object
     */
    public static BacklogStatus getBacklogStatus() {

        BacklogStatus backlogStatus = new BacklogStatus();    
        
        backlogStatus.setDateCreated(BasicDataGenerator.generateDate());
        backlogStatus.setDateDisabled(BasicDataGenerator.generateDate());
        backlogStatus.setDateUpdated(BasicDataGenerator.generateDate());
        backlogStatus.setTypeDescription(BasicDataGenerator.generateRandomString(2147483647));
        backlogStatus.setTypeName(BasicDataGenerator.generateRandomString(2147483647));
        backlogStatus.setUserCreated(BasicDataGenerator.generateRandomLong());
        backlogStatus.setUserUpdated(BasicDataGenerator.generateRandomLong());

        return backlogStatus;
    }

    /**
     * Data pool factory for Book.
     * @return BookA Book object
     */
    public static Book getBook() {

        Book book = new Book();    
        
        book.setAuthorName(BasicDataGenerator.generateRandomString(2147483647));
        book.setBookTitle(BasicDataGenerator.generateRandomString(2147483647));
        book.setDateCreated(BasicDataGenerator.generateDate());
        book.setDateDisabled(BasicDataGenerator.generateDate());
        book.setDatePublished(BasicDataGenerator.generateDate());
        book.setDateUpdated(BasicDataGenerator.generateDate());
        book.setIsbn(BasicDataGenerator.generateRandomString(2147483647));
        book.setNumberOfPages(BasicDataGenerator.generateRandomLong());
        book.setUserCreated(BasicDataGenerator.generateRandomLong());
        book.setUserUpdated(BasicDataGenerator.generateRandomLong());

        return book;
    }

    /**
     * Data pool factory for BookBacklog.
     * @return BookBacklog A BookBacklog object
     */
    public static BookBacklog getBookBacklog() {

        BookBacklog bookBacklog =  getBookBacklog(
	        null, null, null);

		return bookBacklog;
       
    }

     /**
     * Data pool factory for BookBacklog.
     * @param book A valid Book object
     * @param status A valid BacklogStatus object
     * @param user A valid ApplicationUser object
     * @return BookBacklog A BookBacklog object
     */
    public static BookBacklog getBookBacklog(Book book, BacklogStatus status, ApplicationUser user) {
        BookBacklog bookBacklog = new BookBacklog();     
		if (book != null) {
			book.addBookBacklog (bookBacklog);
		}
        bookBacklog.setDateCreated(BasicDataGenerator.generateDate());
        bookBacklog.setDateDisabled(BasicDataGenerator.generateDate());
        bookBacklog.setDateUpdated(BasicDataGenerator.generateDate());
        bookBacklog.setRating(BasicDataGenerator.generateRandomDecimal(0, 0));
		if (status != null) {
			status.addBookBacklog (bookBacklog);
		}
		if (user != null) {
			user.addBookBacklog (bookBacklog);
		}
        bookBacklog.setUserCreated(BasicDataGenerator.generateRandomLong());
        bookBacklog.setUserUpdated(BasicDataGenerator.generateRandomLong());

        return bookBacklog;
    }

    /**
     * Data pool factory for SecurityRole.
     * @return SecurityRoleA SecurityRole object
     */
    public static SecurityRole getSecurityRole() {

        SecurityRole securityRole = new SecurityRole();    
        
        securityRole.setDateCreated(BasicDataGenerator.generateDate());
        securityRole.setDateDisabled(BasicDataGenerator.generateDate());
        securityRole.setDateUpdated(BasicDataGenerator.generateDate());
        securityRole.setRoleDescription(BasicDataGenerator.generateRandomString(2147483647));
        securityRole.setRoleName(BasicDataGenerator.generateRandomString(2147483647));
        securityRole.setUserCreated(BasicDataGenerator.generateRandomLong());
        securityRole.setUserUpdated(BasicDataGenerator.generateRandomLong());

        return securityRole;
    }
    /** Returns the commit order of this database. 
	 * Useful for iterating through the classes for deletion in the right order. 
	 * @return String[] list of classes
	 */
	public String[] getDBCommitOrder() {
		return Arrays.copyOf(commitOrder, commitOrder.length);
	}

	/** Returns the commit order of this database.
	* Useful for iterating through the classes for deletion in the right order.
	* @return Class[] list of classes
	*/
	public Class<?>[] getDBClassCommitOrder() {
		return Arrays.copyOf(classCommitOrder, classCommitOrder.length);
	}

/**
	 * @param className classname to return
	 * @return the tabledeps for the given class name
	 */
	public Collection<String> getTabledeps(String className) {
		return tableDeps.get(className);
	}

	/**
	*   Returns the schema that we used to generate this factory.
	*   @return Schema name
	*/
	public String getSchema(){
		return "bookBash";
	}
	
}
